# Date : 17.May 2018 Walter Brunelli
#
# Usage: ansible-playbook ${0}
#        ansible-playbook ${0} -e "repo_url=https://github.com/wbrunell/repo01"
#        ansible-playbook ${0} -e "repo_dir_name=repo01"
#        ansible-playbook ${0} -e "local_base_dir=/var/tmp"

---
- name: pl_dsf_git_workflow_3_c_resolv_cherry_pick_conflict_tag_push.yml.yml
  hosts: localhost
  become_user: none
  become: no
  vars_files:
    - pl_dsf_git_workflow_all_setupvariables.yml
  tasks:
  ## Do some checks before starting
    - name: Check if Directory exists
      stat: path={{local_base_dir}}/{{repo_dir_name}}/.branch_sos/.git
      register: dir
    - name: Exit if directory does not exists
      fail: msg="Local directory {{local_base_dir}}/{{repo_dir_name}} does not exist. Exiting."
      when: dir.stat.exists == false

    - name: Check if there is already an sos-Branch
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; /usr/local/bin/git branch --list | grep sos >/dev/null 2>&1'
      failed_when: false
      ignore_errors: true
      register: result_sos_branch
    - debug: msg="Exiting Playbook. There is already an sos Branch. Please clean up."
      when: result_sos_branch.rc != 0
    - name: End Play because there is already an sos Branch existing.
      meta: end_play
      when: result_sos_branch.rc != 0

    ## Start the real work
    - name: List all files which have a conflict during the cherry-pick operation
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}/.branch_sos; git diff --name-only --diff-filter=U | xargs'
      register: conflict_files

    - name: Exit if there are no conflict files
    - debug:
        msg:
          - "Exiting Playbook. There are no conflict files to resolv a conflict"
          - "    {{ conflict_files.stdout}}"
      when: conflict_files.stdsout == ""
    - name: End Play because there is a conflict duting the cherry-pick-merge into sos-branch
      meta: end_play
      when: conflict_files.stdsout == ""

    - name: Add and commit the file(s) in which the conflict was resolved
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}/.branch_sos; git add {{ conflict_files.stdout }}; git commit -m "Committing files with conflict resolution"'

    - name: Find the last tag in the sos-Branch (which is the version_to_patch in PROD)
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}/.branch_sos; git describe --abbrev=0 --tags'
      register: latest_tag_sos_branch

    - name: Print latest tag in sos branch
      debug: var=latest_tag_sos.stdout

    - name: Set new Git tag in sos branch - patch number increase
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}/.branch_sos; /usr/local/bin/git tag -a {{item}} -m "{{item}}"'
      with_items:
        - "{{latest_tag_sos.stdout.split('.')[0]}}.{{latest_tag_sos.stdout.split('.')[1]}}.{{latest_tag_sos.stdout.split('.')[2] | int + 1}}"

    - name: Push commits and tags to Github
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}/.branch_sos; /usr/local/bin/git push origin sos --tags'

    - name: Remove sos branch
      shell: "{{item}}"
      with_items:
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; rm -rf .branch_sos'
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git worktree prune'
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git branch -D sos'
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git push origin :sos'
      tags: rm_branch

