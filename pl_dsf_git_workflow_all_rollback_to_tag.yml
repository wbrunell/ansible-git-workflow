#
# What : Playbook to to rollback to a certain tag and remove all tags afterwards
#	 This includes :	- remove all files
#				- remove all tags
#				- remove all branches
#				- create new empty files t1 t2 t3 t4
#
# Date : 17.May 2018 Walter Brunelli
#
# Usage: ansible-playbook pl_dsf_git_workflow_clean_repo.yml
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml -e "repo_url=https://github.com/wbrunell/repo01"
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml -e "repo_dir_name=repo01"
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml -e "local_base_dir=/var/tmp"
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml -e "target_tag=1.0.0"

---
- name: Playbook to to rollback to a certain tag and remove all tags afterwards
  hosts: localhost
  become_user: none
  become: no
  vars_files:
    - pl_dsf_git_workflow_all_setupvariables.yml

  tasks:
    - name: Check if Directory exists
      stat: path={{local_base_dir}}/{{repo_dir_name}}/.git
      register: dir
    - name: Clean the directory (if it is already there)
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; /usr/local/bin/git pull; /usr/local/bin/git clean -f'
      when: dir.stat.exists == true

    - name: Clone directory if it does not exist and clone from Github
      git: repo={{repo_url}} dest={{local_base_dir}}/{{repo_dir_name}}
      when: dir.stat.exists == false

    - name: Check that the tag exists
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; git tag | grep {{target_tag}} | wc -l'
      register: tag_result
#    - debug: msg="Exiting Playbook. There is no such Tag !!"
#      when: tag_result.stdout == 0 or tag_result.rc !=0
    - name: End Play if there is no such Tag                     
      meta: end_play
      when: tag_result.stdout == 0 or tag_result.rc !=0
      
    - name: Find all tags after <Target-Tag> and delete them
      shell: "cd {{local_base_dir}}/{{repo_dir_name}}; git tag --sort=version:refname | awk '$1 > {{target_tag}}' | cut -d' ' -f1 | xargs"
      register: tags_after

    - name: Delete Tags locally
      shell: "cd {{local_base_dir}}/{{repo_dir_name}}; git tag -d {{tags_after.stdout}}"

    - name: Delete Tags upstream
      shell: "cd {{local_base_dir}}/{{repo_dir_name}}; git push origin --tags :{{tags_after.stdout | replace(' ', ' :')}}"

    - name: Really rollback
      shell: "cd {{local_base_dir}}/{{repo_dir_name}}; git reset --hard {{target_tag}}; git clean -fd; git push origin --force"

