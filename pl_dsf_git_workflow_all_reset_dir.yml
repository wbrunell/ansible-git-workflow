#
# What : Playbook to clean and prepare the repo for the Poc of the Git Workflow
#	 This includes :	- remove all files
#				- remove all tags
#				- remove all branches
#				- create new empty files t1 t2 t3 t4
#
# Date : 17.May 2018 Walter Brunelli
#
# Usage: ansible-playbook pl_dsf_git_workflow_clean_repo.yml
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml --extra-vars "repo_url=https://github.com/wbrunell/repo01"
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml --extra-vars "repo_dir_name=repo01"
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml --extra-vars "local_base_dir=/var/tmp"

---
- name: Clean the repo-directory
  hosts: localhost
  become_user: none
  become: no
  vars_files:
    - pl_dsf_git_workflow_all_setupvariables.yml

  tasks:
    - name: Check if Directory exists
      stat: path={{local_base_dir}}/{{repo_dir_name}}/.git
      register: dir
    - name: Clean the directory (if it is already there)
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; /usr/local/bin/git pull; /usr/local/bin/git clean -f'
      when: dir.stat.exists == true
      #debug: msg="repo_dirname = {{repo_dir_name}}"
    - name: Create directory if it does not exist and clone from Github
      git: repo={{repo_url}} dest={{local_base_dir}}/{{repo_dir_name}}
      when: dir.stat.exists == false
    - name: Remove all tags remotely and locally
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; git tag | xargs -n 1 git push -d origin; git tag | xargs git tag -d'
    - name: Remove all local files and directories, create empty files t1-4, push to remote
      shell: "rm -f {{local_base_dir}}/{{repo_dir_name}}/*"
    - name: Create empty files t1-4, commit and push to remote
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; touch {{ item }}; git add .; git commit -m "Reset all files"'
      with_items:
        - t1
        - t2
        - t3
        - t4
    - name: Create Starting Tag 1.0.0 and push everything to Github
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; git tag -a 1.0.0 -m "Starting Version"; git push origin master --tags'
      
#    - name: Find latest version (tag)
#      shell: git describe --abbrev=0 --tags chdir=/tmp/{{stream_feed}}
#      register: latest_tag  
#    - name: Create tar.gz Archive for RPM package (excluding .git directory)
#      shell: /usr/bin/tar czf /tmp/{{stream_feed}}.tar.gz ./{{stream_feed}} --exclude ./{{stream_feed}}/.git chdir=/tmp warn=false
#    - name: Cleanup the old rpmbuild structure
#      file: path=~/rpmbuild state=absent
#    - name: Create the rpmbuild structure
#      file: path=~/{{ item }} state=directory
#      with_items:
#        - rpmbuild/SPECS
#        - rpmbuild/SOURCES
#        - rpmbuild/BUILD
#        - rpmbuild/RPMS
#    - name: Copy the tar.gz archive to the rpmbuild structure
#      command: cp /tmp/{{stream_feed}}.tar.gz ~/rpmbuild/SOURCES
#    - name: Copy the spec-file template
#      template: src=templates/rpm_spec_mit_version.spec dest=~/rpmbuild/SPECS 
#    - name: Build the RPM package. The finished package will be ~rpmbuild/rpmbuild/RPMS/noarch/{{stream_feed}}-{{latest_tag.stdout[1:]}}-0.noarch.rpm
#      command: rpmbuild -vv -bb ~/rpmbuild/SPECS/rpm_spec_mit_version.spec --clean
#    - name: Copy RPM package to the TML repository
#      shell: scp /home/dsfrpmbuild/rpmbuild/RPMS/noarch/{{stream_feed}}-{{latest_tag.stdout[1:]}}-0.noarch.rpm cos020:/var/www/html/dsf_tml

#- name: Update TML Repo
#  hosts: cos020
#  become_user: dsfrpmbuild
#  become: yes
#  tasks:
#    - name: Update repo
#      shell: "createrepo /var/www/html/dsf_tml --update"
#
#- name: Install on DEV server
#  hosts: dsf_dev
#  become_user: root
#  become: yes
#  vars:
#    stream_feed: "{{ repo_name | default('dsf-pseudo-xxx') }}"
#  tasks:
#    - name: Make yum cache expire in order to re-read updated reposerver metadata
#      shell: yum clean expire-cache warn=no
#    - name: Update repo metadata
#      shell: yum repolist warn=no
#    - name: Install package
#      #yum: name={{stream_feed}}-{{hostvars.cos019.latest_tag.stdout[1:]}}-0.noarch state=present
#      yum: name={{stream_feed}} state=latest


