#
# What : Playbook to clean and prepare the repo for the Poc of the Git Workflow
#	 This includes :	- remove all files
#				- remove all tags
#				- remove all branches
#				- create new empty files t1 t2 t3 t4
#
# Date : 17.May 2018 Walter Brunelli
#
# Usage: ansible-playbook pl_dsf_git_workflow_clean_repo.yml
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml -e "repo_url=https://github.com/wbrunell/repo01"
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml -e "repo_dir_name=repo01"
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml -e "local_base_dir=/var/tmp"

---
- name: Clean the repo-directory
  hosts: localhost
  become_user: none
  become: no
  vars_files:
    - pl_dsf_git_workflow_all_setupvariables.yml

  tasks:
    - name: Check if Directory exists
      stat: path={{local_base_dir}}/{{repo_dir_name}}/.git
      register: dir
    - name: Clean the directory (if it is already there)
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; /usr/local/bin/git pull; /usr/local/bin/git clean -f'
      when: dir.stat.exists == true
      #debug: msg="repo_dirname = {{repo_dir_name}}"

    - name: Check if branch Directory exists
      stat: path={{local_base_dir}}/{{repo_dir_name}}/.branch_sos
      register: branchdir
    - name: Remove the branch directory (if it is already there)
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; rm -rf .branch_sos; git worktree prune; git branch -D sos'
      when: branchdir.stat.exists == true

    - name: Create directory if it does not exist and clone from Github
      git: repo={{repo_url}} dest={{local_base_dir}}/{{repo_dir_name}}
      when: dir.stat.exists == false
    - name: Remove all tags remotely and locally
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; git tag | xargs -n 1 git push -d origin; git tag | xargs git tag -d'
    - name: Remove all local files and directories, create empty files t1-4, push to remote
      shell: "rm -rf {{local_base_dir}}/{{repo_dir_name}}/*"
    - name: Create empty files t1-4, commit and push to remote
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; touch {{ item }}; git add .; git commit -m "COMMIT COMMENT - Reset all files"'
      with_items:
        - t1
        - t2
        - t3
        - t4
    - name: Create Starting Tag 1.0.0 and push everything to Github
#      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; git tag {{ item }} -m "TAG COMMENT - Starting Version"; git push origin master --tags'
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; {{ tag_command }}; git push origin master --tags'
      with_items:
        - 1.0.0
      
    - name: Create .gitignore and push to Github
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; echo ".branch_sos" > .gitignore; git add .; git push origin master --tags'
      

