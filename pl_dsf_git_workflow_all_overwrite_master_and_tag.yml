#
# What : Playbook to :
#		- Initialize Working Dir
#		- Connect to Github
#		- Save local code to branch
#		- Tag the Branch and delte the Branch (Tag is kept in GIT)
#
# Date : 21.June 2018 Walter Brunelli
#
# Usage: ansible-playbook pl_dsf_git_workflow_clean_repo.yml
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml -e "repo_url=https://github.com/wbrunell/repo01"
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml -e "repo_dir_name=repo01"
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml -e "local_base_dir=/var/tmp"

---
- name: Save current status in a branch
  hosts: localhost
  become_user: none
  become: no
  vars:
    backup_branch_name: backup_{{ansible_date_time.date}}_{{ansible_date_time.hour}}-{{ansible_date_time.minute}}-{{ansible_date_time.second}}
    backup_tag_name: backup_dwproot_{{ansible_date_time.date}}_{{ansible_date_time.hour}}-{{ansible_date_time.minute}}-{{ansible_date_time.second}}
  vars_files:
    - pl_dsf_git_workflow_all_setupvariables.yml

  tasks:
    - name: Check that the  Directory exists
      stat: path={{local_base_dir}}/{{repo_dir_name}}
      register: dir
    - debug: msg="Exiting Directory does not exist"
      when: dir.stat.isdir == false
    - name: End Play 
      meta: end_play
      when: dir.stat.isdir == false

    - name: Check that the Directory is not already under GIT control
      stat: path={{local_base_dir}}/{{repo_dir_name}}/.git
      register: dir
    - debug: msg="Exiting, Directory is already under GIT control"
      when: dir.stat.exists == true
    - name: End Play 
      meta: end_play
      when: dir.stat.exists == true

#    - name: Check that branch does not already exists
#      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; git branch -a | grep {{backup_branch_name}}'
#      register: branch
#    - debug: msg="Exiting, Branch save_from_migration already exists. Code already saved."
#      when: branch.rc == 0
#    - name: End Play if branch does already exist
#      meta: end_play
#      when: branch.rc == 0

    - name: Copy current status to a new branch, tag it and remove Branch 
      shell: "{{item}}"
      with_items:
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git init .'
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git remote add origin {{repo_url}}'
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git fetch'					# Fetch repo and tags tolocal repo
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git checkout --orphan {{backup_branch_name}}'
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git add .'
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git commit -m "first commit of {{backup_branch_name}}"'
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git tag {{backup_tag_name}} -m "This is the backup of the code in dwp_root"' 
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git push -u origin {{backup_branch_name}} --tags'
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git checkout -f master'
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git pull --tags'
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git clean -fd' 
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; rm -rf *' 
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git add .'
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git commit -m "removing everything in master branch"'
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git merge -X theirs {{backup_branch_name}} --allow-unrelated-histories -m "Merging backup branch to master"' 
# for AIX: - 'cd {{local_base_dir}}/{{repo_dir_name}}; git merge -X theirs {{backup_branch_name}} -m "Merging backup branch to master"' 
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git tag NEW-TAG -m "This is the new version. Based on what was in dwp_root"' 
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git push origin master --tags'
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git branch -D {{backup_branch_name}}' 
        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git push origin :{{backup_branch_name}}' 
#        - 'cd {{local_base_dir}}/{{repo_dir_name}}; git diff master {{backup_tag_name}}'
