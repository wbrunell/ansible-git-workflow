#
# What : Playbook to clean and prepare the repo for the Poc of the Git Workflow
#	 This includes :	- remove all files
#				- remove all tags
#				- remove all branches
#				- create new empty files t1 t2 t3 t4
#
# Date : 17.May 2018 Walter Brunelli
#
# Usage: ansible-playbook pl_dsf_git_workflow_clean_repo.yml
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml --extra-vars "repo_url=https://github.com/wbrunell/repo01"
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml --extra-vars "repo_dir_name=repo01"
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml --extra-vars "local_base_dir=/var/tmp"
#	 ansible-playbook pl_dsf_git_workflow_clean_repo.yml --extra-vars "release_change_type: {major|minor|patch}"

---
- name: Clean the repo-directory
  hosts: localhost
  become_user: none
  become: no
  vars_files:
    - pl_dsf_git_workflow_all_setupvariables.yml
  # Prompt the user what kind of release change it is (major|mionor|patch)
  vars_prompt:
    - name: release_change_type_id
      prompt: "What kind of change are you about to release ? \nRequired to identify which field of the version number will be increased. \n1- major\n2- minor\n3- patch"

  tasks:
    - name: Check if Directory exists
      stat: path={{local_base_dir}}/{{repo_dir_name}}/.git
      register: dir
    - name: Exit if directory does not exists
      fail: msg="Local directory {{local_base_dir}}/{{repo_dir_name}} does not exist. Exiting."  
      when: dir.stat.exists == false

    - name: Check if there is something to add and commit
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; /usr/local/bin/git diff --exit-code >/dev/null 2>&1'
      ignore_errors: true
      register: result

    - debug: msg="Exiting Playbook. There are no changes in the working directory. Status is clean"
    - name: End Play if there are no changes in the Working-Dir
      meta: end_play
      when: result.rc == 0

    - name: Add and commit changes 
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; /usr/local/bin/git add . ; /usr/local/bin/git commit -m "Commit changes"'

    - name: Find latest version (tag)
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; git describe --abbrev=0 --tags chdir={{local_base_dir}}/{{repo_dir_name}}'
      register: latest_tag  

    - name: Print latest tag
      debug: var=latest_tag.stdout

    - name: Print major
      debug: msg="{{latest_tag.stdout.split('.')[0]}}"

    - name: Print minor
      debug: msg="{{latest_tag.stdout.split('.')[1]}}"

    - name: Print patch
      debug: msg="{{latest_tag.stdout.split('.')[2]}}"

    - name: Set new Git tag - major number increase 
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; /usr/local/bin/git tag -a {{item}} -m "{{item}}"'
      with_items:
        - "{{latest_tag.stdout.split('.')[0] | int + 1}}.0.0"
      when: release_change_type_id == "1"

    - name: Set new Git tag - minor number increase
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; /usr/local/bin/git tag -a {{item}} -m "{{item}}"'
      with_items:
        - "{{latest_tag.stdout.split('.')[0]}}.{{latest_tag.stdout.split('.')[1] | int + 1}}.0"
      when: release_change_type_id == "2"

    - name: Set new Git tag - patch number increase
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; /usr/local/bin/git tag -a {{item}} -m "{{item}}"'
      with_items:
        - "{{latest_tag.stdout.split('.')[0]}}.{{latest_tag.stdout.split('.')[1]}}.{{latest_tag.stdout.split('.')[2] | int + 1}}"
      when: release_change_type_id == "3"

    - name: Push commits and tag to Github
      shell: 'cd {{local_base_dir}}/{{repo_dir_name}}; /usr/local/bin/git push origin master --tags'
